{"version":3,"sources":["../src/Snowfall.tsx"],"names":["Snowfall","snowflakeCount","style","config","mergedStyle","canvasRef","canvasSize","animationFrame","lastUpdate","Date","now","color","defaultConfig","speed","wind","radius","changeFrequency","mergedConfig","Object","assign","snowflakes","updateCanvasRef","element","current","render","framesPassed","canvas","forEach","snowflake","update","ctx","getContext","clearRect","offsetWidth","offsetHeight","draw","loop","msPassed","targetFrameTime","requestAnimationFrame","cancelAnimationFrame","height","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { targetFrameTime } from './config'\nimport { useComponentSize, useSnowfallStyle, useSnowflakes } from './hooks'\nimport { defaultConfig, SnowflakeConfig } from './Snowflake'\n\nexport interface SnowfallProps {\n  config?: SnowflakeConfig\n  snowflakeCount?: number\n  style?: React.CSSProperties\n}\n\nconst Snowfall = ({ snowflakeCount = 150, style, config }: SnowfallProps = {}) => {\n  const mergedStyle = useSnowfallStyle(style)\n\n  const canvasRef = useRef<HTMLCanvasElement>()\n  const canvasSize = useComponentSize(canvasRef)\n  const animationFrame = useRef(0)\n\n  const lastUpdate = useRef(Date.now())\n\n  const {\n    color = defaultConfig.color,\n    speed = defaultConfig.speed,\n    wind = defaultConfig.wind,\n    radius = defaultConfig.radius,\n    changeFrequency = defaultConfig.changeFrequency,\n  } = config || {}\n  const mergedConfig = useMemo(\n    () => Object.assign({}, defaultConfig, { color, speed, wind, radius, changeFrequency }),\n    [color, speed, wind, radius, changeFrequency],\n  )\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, mergedConfig)\n\n  const updateCanvasRef = (element: HTMLCanvasElement) => {\n    canvasRef.current = element\n  }\n\n  const render = useCallback(\n    (framesPassed: number = 1) => {\n      const canvas = canvasRef.current\n      if (canvas) {\n        // Update the positions of the snowflakes\n        snowflakes.forEach(snowflake => snowflake.update(canvas, framesPassed))\n\n        // Render them if the canvas is available\n        const ctx = canvas.getContext('2d')\n        if (ctx) {\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\n\n          snowflakes.forEach(snowflake => snowflake.draw(canvas, ctx))\n        }\n      }\n    },\n    [snowflakes],\n  )\n\n  const loop = useCallback(() => {\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\n    const now = Date.now()\n    const msPassed = Date.now() - lastUpdate.current\n    lastUpdate.current = now\n\n    // Frames that would have passed if running at 60 fps\n    const framesPassed = msPassed / targetFrameTime\n\n    render(framesPassed)\n\n    animationFrame.current = requestAnimationFrame(loop)\n  }, [render])\n\n  useEffect(() => {\n    loop()\n    return () => cancelAnimationFrame(animationFrame.current)\n  }, [loop])\n\n  return <canvas ref={updateCanvasRef} height={canvasSize.height} width={canvasSize.width} style={mergedStyle} />\n}\n\nexport default Snowfall\n"],"file":"Snowfall.js"}