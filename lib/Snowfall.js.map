{"version":3,"sources":["../src/Snowfall.tsx"],"names":["Snowfall","snowflakeCount","style","config","defaultConfig","mergedStyle","canvasRef","canvasSize","animationFrame","lastUpdate","Date","now","color","speed","wind","radius","changeFrequency","mergedConfig","snowflakes","updateCanvasRef","element","current","render","framesPassed","canvas","forEach","snowflake","update","ctx","getContext","clearRect","offsetWidth","offsetHeight","draw","loop","msPassed","targetFrameTime","requestAnimationFrame","cancelAnimationFrame","height","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { targetFrameTime } from './config'\nimport { useComponentSize, useSnowfallStyle, useSnowflakes } from './hooks'\nimport { defaultConfig, SnowflakeConfig } from './Snowflake'\n\nexport interface SnowfallProps {\n  config?: SnowflakeConfig\n  snowflakeCount?: number\n  style?: React.CSSProperties\n}\n\nconst Snowfall = ({ snowflakeCount = 150, style, config = defaultConfig }: SnowfallProps = {}) => {\n  const mergedStyle = useSnowfallStyle(style)\n\n  const canvasRef = useRef<HTMLCanvasElement>()\n  const canvasSize = useComponentSize(canvasRef)\n  const animationFrame = useRef(0)\n\n  const lastUpdate = useRef(Date.now())\n  const { color, speed, wind, radius, changeFrequency } = config\n  const mergedConfig = useMemo(() => ({ ...defaultConfig, color, speed, wind, radius, changeFrequency }), [\n    color,\n    speed,\n    wind,\n    radius,\n    changeFrequency,\n  ])\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, mergedConfig)\n\n  const updateCanvasRef = (element: HTMLCanvasElement) => {\n    canvasRef.current = element\n  }\n\n  const render = useCallback(\n    (framesPassed: number = 1) => {\n      const canvas = canvasRef.current\n      if (canvas) {\n        // Update the positions of the snowflakes\n        snowflakes.forEach(snowflake => snowflake.update(canvas, framesPassed))\n\n        // Render them if the canvas is available\n        const ctx = canvas.getContext('2d')\n        if (ctx) {\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\n\n          snowflakes.forEach(snowflake => snowflake.draw(canvas, ctx))\n        }\n      }\n    },\n    [snowflakes],\n  )\n\n  const loop = useCallback(() => {\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\n    const now = Date.now()\n    const msPassed = Date.now() - lastUpdate.current\n    lastUpdate.current = now\n\n    // Frames that would have passed if running at 60 fps\n    const framesPassed = msPassed / targetFrameTime\n\n    render(framesPassed)\n\n    animationFrame.current = requestAnimationFrame(loop)\n  }, [render])\n\n  useEffect(() => {\n    loop()\n    return () => cancelAnimationFrame(animationFrame.current)\n  }, [loop])\n\n  return <canvas ref={updateCanvasRef} height={canvasSize.height} width={canvasSize.width} style={mergedStyle} />\n}\n\nexport default Snowfall\n"],"file":"Snowfall.js"}