{"version":3,"sources":["../src/hooks.ts"],"names":["createSnowflakes","canvasRef","amount","config","snowflakes","i","push","Snowflake","current","useSnowflakes","setSnowflakes","sizeDifference","length","slice","map","snowflake","useComponentSize","ref","size","setSize","resizeHandler","window","ResizeObserver","resizeObserver","observe","disconnect","addEventListener","removeEventListener","useSnowfallStyle","overrides","styles","snowfallBaseStyle"],"mappings":"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","sourcesContent":["import { useCallback, useLayoutEffect, useEffect, useState, MutableRefObject, CSSProperties, useMemo } from 'react'\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\nimport { snowfallBaseStyle } from './config'\nimport { getSize } from './utils'\n\n/**\n * A utility function to create a collection of snowflakes\n * @param canvasRef A ref to the canvas element\n * @param amount The number of snowflakes\n * @param config The configuration for each snowflake\n */\nconst createSnowflakes = (\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>,\n  amount: number,\n  config: SnowflakeConfig,\n) => {\n  const snowflakes: Snowflake[] = []\n\n  for (let i = 0; i < amount; i++) {\n    snowflakes.push(new Snowflake(canvasRef.current as HTMLCanvasElement, config))\n  }\n\n  return snowflakes\n}\n\n/**\n * A utility hook to manage creating and updating a collection of snowflakes\n * @param canvasRef A ref to the canvas element\n * @param amount The number of snowflakes\n * @param config The configuration for each snowflake\n */\nexport const useSnowflakes = (\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>,\n  amount: number,\n  config: SnowflakeConfig,\n) => {\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\n\n  // Handle change of amount\n  useEffect(() => {\n    setSnowflakes(snowflakes => {\n      const sizeDifference = amount - snowflakes.length\n\n      if (sizeDifference > 0) {\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\n      }\n\n      if (sizeDifference < 0) {\n        return snowflakes.slice(0, amount)\n      }\n\n      return snowflakes\n    })\n  }, [amount, canvasRef, config])\n\n  // Handle change of config\n  useEffect(() => {\n    setSnowflakes(snowflakes =>\n      snowflakes.map(snowflake => {\n        snowflake.config = config\n        return snowflake\n      }),\n    )\n  }, [config])\n\n  return snowflakes\n}\n\n/**\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\n * size. Falls back to listening for resize events on the window.\n * @param ref A ref to the HTML element to be measured\n */\nexport const useComponentSize = (ref: MutableRefObject<HTMLElement | undefined>) => {\n  const [size, setSize] = useState(getSize(ref.current))\n\n  const resizeHandler = useCallback(() => {\n    if (ref.current) {\n      setSize(getSize(ref.current))\n    }\n  }, [ref])\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window\n\n    if (!ref.current) return\n    resizeHandler()\n\n    if (typeof ResizeObserver === 'function') {\n      const resizeObserver = new ResizeObserver(resizeHandler)\n      resizeObserver.observe(ref.current)\n\n      return () => resizeObserver.disconnect()\n    } else {\n      window.addEventListener('resize', resizeHandler)\n\n      return () => window.removeEventListener('resize', resizeHandler)\n    }\n  }, [ref, resizeHandler])\n\n  return size\n}\n\n/**\n * Utility hook that merges any provided styles with the default styles\n * @param overrides The style prop passed into the component\n */\nexport const useSnowfallStyle = (overrides?: CSSProperties) => {\n  const styles = useMemo(\n    () => ({\n      ...snowfallBaseStyle,\n      ...(overrides || {}),\n    }),\n    [overrides],\n  )\n\n  return styles\n}\n"],"file":"hooks.js"}